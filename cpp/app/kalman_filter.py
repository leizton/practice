# -*- coding: UTF-8 -*-

import numpy as np
import pylab

data = [330,333,331,305,276,263,262,246,224,178,210,236,265,279,298,319,342,323,325,310,296,301,306,316,323,304,283,277,295,306,294,260,245,246,247,266,261,257,273,278,279,304,310,327,310,280,270,259,241,246,269,286,278,264,237,192,209,237,257,273,283,287,283,290,300,315,329,351,357,365,359,347,347,335,301,271,296,332,347,338,338,345,339,319,316,320,313,298,279,295,289,283,283,292,296,291,286,288,304,296,301,284,269,272,296,302,313,320,321,295,270,272,279,288,291,277,271,267,281,290,325,316,306,294,268,269,283,272,208,219,251,268,265,264,272,284,321,337,332,327,308,237,209,197,201,213,245,269,292,314,335,349,367,377,374,380,380,383,370,334,301,268,244,244,257,252,216,204,226,231,244,275,293,283,274,276,282,263,258,262,258,251,255,253,257,258,259,258,258,266,270,273,302,317,335,341,317,298,292,305,289,291,256,210,200,216,250,258,244,246,259,265,277,291,313,327,346,348,329,330,342,372,382,382,346,274,251,240,242,248,257,241,240,255,273,255,214,205,223,258,261,255,267,260,272,287,284,265,259,291,315,356,379,395,394,376,340,269,239,241,256,284,306,326,325,333,324,326,328,319,326,312,298,312,315,329,362,400,409,405,377,354,336,335,335,344,368,361,371,372,374,348,308,271,256,251,250,253,267,266,287,289,289,271,255,258,257,269,282,277,256,265,252,247,248,254,265,278,287,280,250,224,223,236,267,316,352,389,398,416,422,418,427,443,454,440,365,273,248,249,247,243,269,279,294,275,254,245,245,242,241,252,267,265,267,278,256,252,274,291,276,230,218,243,285,315,338,346,364,389,392,378,372,367,366,374,372,371,367,353,341,335,332,336,331,318,314,295,234,213,229,253,265,293,319,308,297,263,225,201,209,228,268,279,294,303,318,331,354,359,337,273,266,263,258,262,287,272,223,219,228,241,253,258,269,308,338,351,369,376,386,388,399,403,413,412,396,344,276,217,187,193,213,239,261,268,273,271,272,281,265,254,245,259,273,273,273,294,305,284,273,274,267,250,251,261,277,290,249,201,226,236,199,208,242,269,292,306,333,361,371,397,408,415,423,422,418,418,426,402,334,286,294,315,331,352,347,319,296,307,319,321,328,336,327,315,297,283,283,289,278,277,276,290,290,289,303,313,323,339,346,342,354,372,383,380,371,333,313,305,285,267,251,256,234,220,227,222,239,267,280,291,296,264,222,209,235,250,261,283,303,323,343,360,359,366,377,393,415,429,432,432,434,417,342,234,189,169,182,201,221,238,234,193,209,232,273,291,321,322,316,292,312,326,340,346,341,303,285,284,302,329,342,345,360,371,369,360,351,330,291,264,253,253,266,253,254,266,255,260,270,289,304,288,274,260,273,280,304,297,283,278,283,311,334,339,355,368,385,387,407,442,471,444,378,268,232,191,153,168,180,217,254,297,320,337,356,358,358,349,299,240,205,213,224,246,269,285,308,330,348,345,327,315,305,271,237,224,231,248,279,299,313,321,309,293,295,306,306,284,281,288,301,298,293,276,275,268,271,286,266,259,257,278,291,300,310,314,316,316,336,359,392,400,404,410,408,402,391,361,294,231,210,187,175,179,202,233,253,294,329,344,361,382,400,401,400,368,337,272,207,184,181,199,206,226,257,277,288,294,285,280,275,278,275,281,301,295,300,320,331,356,378,410,424,380,308,255,248,234,278,313,325,336,327,322,331,320,316,305,287,285,310,310,306,303,290,291,290,304,307,293,290,297,313,307,285,265,268,261,268,267,253,213,211,238,240,193,192,166,196,206,210,226,244,234,209,205,229,256,279,282,289,306,314,276,228,244,281,305,321,320,307,297,283,282,293,303,301,294,309,317,318,316,283,241,221,231,237,255,264,270,283,283,275,285,316,318,266,253,236,248,265,284,301,310,297,286,303,340,368,401,422,414,425,437,447,457,467,474,479,466,457,422,357,249,199,169,147,154,163,172,172,175,196,215,246,240,194,207,247,284,322,342,345,324,311,321,327,349,361,353,336,302,252,238,247,260,251,261,264,262,257,261,261,264,272,283,284,279,286,314,333,339,358,372,373,378,388,412,426,428,440,439,371,286,221,196,174,166,161,181,204,217,233,248,254,266,267,276,289,301,311,301,274,256,238,235,248,265,256,229,206,206,234,261,301,358,403,425,451,458,442,427,387,315,234,189,170,178,170,160,173,205,225,235,242,250,268,278,284,302,317,323,329,327,338,332,324,323,303,295,308,292,257,244,266,297,315,330,357,369,380,378,376,386,381,352,294,238,201,198,206,223,231,224,214,190,171,175,193,202,219,243,261,267,268,274,305,339,353,358,354,337,290,238,228,231,233,265,282,289,289,287,287,293,294,306,283,232,211,225,240,254,259,258,248,240,263,284,306,304,311,320,325,324,310,307,288,301,294,292,280,270,264,281,303,319,308,298,308,330,326,307,288,270,254,260,257,264,262,261,253,255,290,314,322,322,280,235,220,230,262,282,303,301,311,335,363,381,386,387,380,351,327,284,230,210,210,212,232,229,234,246,267,292,307,316,313,305,316,330,331,338,332,333,333,330,323,303,272,241,240,235,235,246,252,242,241,237,247,256,266,268,271,276,283,282,300,325,348,346,357,359,356,357,358,360,368,368,348,323,305,269,245,194,179,181,192,226,264,269,257,254,260,269,271,263,257,240,218,218,240,255,249,259,280,296,320,351,347,332,334,308,279,269,286,314,328,355,369,384,380,374,364,364,370,370,335,272,239,255,258,271,307,316,334,352,382,413,442,454,447,441,410,354,253,191,172,177,170,178,196,203,210,215,227,231,242,269,283,301,313,301,286,283,284,276,277,280,276,278,287,290,296,294,311,309,311,344,370,378,371,355,345,336,348,357,354,355,346,309,258,246,239,254,252,243,257,279,300,315,334,343,339,329,315,310,307,314,314,327,339,355,356,363,348,325,276,253,256,266,279,279,265,260,261,257,254,234,243,242,253,277,274,257,257,262,277,268,239,223,222,234,249,264,271,295,303,313,314,298,286,289,289,282,297,301,278,272,268,281,302,303,315,325,319,314,325,351,358,352,365,367,362,333,277,239,238,248,259,269,275,283,304,312,304,303,308,323,306,288,259,257,251,262,279,297,320,333,336,328,285,216,215,233,264,280,264,250,249,262,261,272,312,345,358,355,368,332,265,237,223,205,198,210,251,266,262,266,293,276,259,271,277,285,298,270,229,219,224,250,271,282,290,293,316,311,312,304,306,308,296,257,234,251]
data_idx = 0

def genByData():
  global data, data_idx
  res = data[data_idx]
  data_idx += 1
  return res

def genByNormalRand():
  mu = 200
  sigma = 70
  res = int(np.random.normal(mu, sigma, 1)[0])
  return max(100, res)

def genNext():
  return genByData()

Q = 1e-5  # 过程噪声
R = 4e-3  # 观测噪声

if __name__ == '__main__':
  x_predict = 150.  # x的先验估计
  x_estimate = 0.   # x的后验估计
  p_predict = 0.    # p的先验估计
  p_estimate = 0.   # p的后验估计
  k_gain = 0.       # 卡尔曼增益

  measure_arr = []
  estimate_arr = []

  for i in range(0, 200):
    # 观测
    measure_val = genNext()
    measure_arr += [measure_val]

    # 估计
    k_gain = p_predict / (p_predict + R)
    x_estimate = x_predict + k_gain * (measure_val - x_predict)
    p_estimate = (1 - k_gain) * p_predict
    estimate_arr += [x_estimate]
    # print('%s\t%s\t%s' % (i, measure_val, int(x_estimate)))

    # 更新
    x_predict = x_estimate
    p_predict = p_estimate + Q

  # plot
  pylab.figure()
  pylab.plot(measure_arr, '-', color='k')
  pylab.plot(estimate_arr, '-', color='b')
  pylab.show()
